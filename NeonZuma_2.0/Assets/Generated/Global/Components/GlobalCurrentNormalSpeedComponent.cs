//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GlobalContext {

    public GlobalEntity currentNormalSpeedEntity { get { return GetGroup(GlobalMatcher.CurrentNormalSpeed).GetSingleEntity(); } }
    public CurrentNormalSpeedComponent currentNormalSpeed { get { return currentNormalSpeedEntity.currentNormalSpeed; } }
    public bool hasCurrentNormalSpeed { get { return currentNormalSpeedEntity != null; } }

    public GlobalEntity SetCurrentNormalSpeed(float newValue) {
        if (hasCurrentNormalSpeed) {
            throw new Entitas.EntitasException("Could not set CurrentNormalSpeed!\n" + this + " already has an entity with CurrentNormalSpeedComponent!",
                "You should check if the context already has a currentNormalSpeedEntity before setting it or use context.ReplaceCurrentNormalSpeed().");
        }
        var entity = CreateEntity();
        entity.AddCurrentNormalSpeed(newValue);
        return entity;
    }

    public void ReplaceCurrentNormalSpeed(float newValue) {
        var entity = currentNormalSpeedEntity;
        if (entity == null) {
            entity = SetCurrentNormalSpeed(newValue);
        } else {
            entity.ReplaceCurrentNormalSpeed(newValue);
        }
    }

    public void RemoveCurrentNormalSpeed() {
        currentNormalSpeedEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GlobalEntity {

    public CurrentNormalSpeedComponent currentNormalSpeed { get { return (CurrentNormalSpeedComponent)GetComponent(GlobalComponentsLookup.CurrentNormalSpeed); } }
    public bool hasCurrentNormalSpeed { get { return HasComponent(GlobalComponentsLookup.CurrentNormalSpeed); } }

    public void AddCurrentNormalSpeed(float newValue) {
        var index = GlobalComponentsLookup.CurrentNormalSpeed;
        var component = (CurrentNormalSpeedComponent)CreateComponent(index, typeof(CurrentNormalSpeedComponent));
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceCurrentNormalSpeed(float newValue) {
        var index = GlobalComponentsLookup.CurrentNormalSpeed;
        var component = (CurrentNormalSpeedComponent)CreateComponent(index, typeof(CurrentNormalSpeedComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveCurrentNormalSpeed() {
        RemoveComponent(GlobalComponentsLookup.CurrentNormalSpeed);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GlobalMatcher {

    static Entitas.IMatcher<GlobalEntity> _matcherCurrentNormalSpeed;

    public static Entitas.IMatcher<GlobalEntity> CurrentNormalSpeed {
        get {
            if (_matcherCurrentNormalSpeed == null) {
                var matcher = (Entitas.Matcher<GlobalEntity>)Entitas.Matcher<GlobalEntity>.AllOf(GlobalComponentsLookup.CurrentNormalSpeed);
                matcher.componentNames = GlobalComponentsLookup.componentNames;
                _matcherCurrentNormalSpeed = matcher;
            }

            return _matcherCurrentNormalSpeed;
        }
    }
}
